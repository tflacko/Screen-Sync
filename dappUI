import React, { useState, useMemo, useEffect } from 'react';
import { Moon, Sun, Globe, Megaphone, Wallet, MapPin, ArrowRight, Shield, Users, BarChart3, Plus, Search, Eye, Clock, DollarSign, AlertCircle } from 'lucide-react';

const ScreenSyncDApp = () => {
  const [darkMode, setDarkMode] = useState(true);
  const [showModeSelection, setShowModeSelection] = useState(true);
  const [showUserTypeSelection, setShowUserTypeSelection] = useState(false);
  const [showOnboarding, setShowOnboarding] = useState(false);
  const [showDashboard, setShowDashboard] = useState(false);
  const [userType, setUserType] = useState('');
  const [isVisionMode, setIsVisionMode] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);
  const [userData, setUserData] = useState({
    wallet: '',
    type: '',
    location: ''
  });

  // Theme configuration
  const bgClass = darkMode ? 'bg-gray-950 text-white' : 'bg-gray-50 text-gray-900';
  const cardBg = darkMode ? 'bg-gray-900 border-gray-700' : 'bg-white border-gray-200';

  // Mock marketplace data
  const mockListings = [
    {
      id: 1,
      title: "Times Square Digital Billboard",
      location: "New York, NY",
      price: 2.5,
      size: "1920x1080",
      duration: 7,
      views: 1250000,
      available: true,
      image: "https://images.unsplash.com/photo-1496442226666-8d4d0e62e6e9?w=400&h=300&fit=crop"
    },
    {
      id: 2,
      title: "London Eye LED Screen",
      location: "London, UK", 
      price: 1.8,
      size: "1280x720",
      duration: 14,
      views: 890000,
      available: true,
      image: "https://images.unsplash.com/photo-1513635269975-59663e0ac1ad?w=400&h=300&fit=crop"
    },
    {
      id: 3,
      title: "Tokyo Shibuya Crossing",
      location: "Tokyo, Japan",
      price: 3.2,
      size: "1920x1080", 
      duration: 30,
      views: 2100000,
      available: false,
      image: "https://images.unsplash.com/photo-1540959733332-eab4deabeeaf?w=400&h=300&fit=crop"
    }
  ];

  // Persist non-sensitive preferences
  useEffect(() => {
    const savedPrefs = localStorage.getItem('screenSyncPrefs');
    if (savedPrefs) {
      try {
        const prefs = JSON.parse(savedPrefs);
        if (prefs.darkMode !== undefined) setDarkMode(prefs.darkMode);
        if (prefs.isVisionMode !== undefined) setIsVisionMode(prefs.isVisionMode);
      } catch (e) {
        console.error('Failed to load preferences:', e);
      }
    }
  }, []);

  useEffect(() => {
    const prefs = { darkMode, isVisionMode };
    localStorage.setItem('screenSyncPrefs', JSON.stringify(prefs));
  }, [darkMode, isVisionMode]);

  // Mode selection handler
  const handleModeSelection = (isDark) => {
    setDarkMode(isDark);
    setShowModeSelection(false);
    setShowUserTypeSelection(true);
  };

  // User type selection handler
  const handleUserTypeSelection = (type) => {
    setUserType(type);
    setShowUserTypeSelection(false);
    setShowOnboarding(true);
  };

  // Onboarding completion handler
  const handleOnboardingComplete = (data) => {
    setUserData(data);
    setShowOnboarding(false);
    setShowDashboard(true);
  };

  // Error component
  const ErrorMessage = ({ message, onDismiss }) => (
    <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-4 flex items-start space-x-3">
      <AlertCircle className="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0 mt-0.5" />
      <div className="flex-1">
        <p className="text-sm text-red-800 dark:text-red-200">{message}</p>
      </div>
      {onDismiss && (
        <button
          onClick={onDismiss}
          className="text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-200"
        >
          ×
        </button>
      )}
    </div>
  );

  // Mode Selection Component
  const ModeSelection = () => (
    <div className={`fixed inset-0 z-50 flex items-center justify-center ${bgClass}`}>
      <div className="absolute inset-0 bg-black bg-opacity-50"></div>
      <div className={`relative z-10 p-8 rounded-2xl border max-w-md w-full mx-4 ${cardBg}`}>
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold mb-2">Welcome to Screen Sync</h2>
          <p className="text-gray-600 dark:text-gray-400 text-sm">
            Choose your preferred theme to get started
          </p>
        </div>

        <div className="grid grid-cols-2 gap-4 mb-6">
          <button
            onClick={() => handleModeSelection(false)}
            className="p-4 rounded-xl border-2 border-gray-300 hover:border-red-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-red-600 focus:ring-offset-2"
            aria-label="Select light mode"
          >
            <Sun className="w-8 h-8 mx-auto mb-2 text-yellow-500" />
            <span className="text-sm font-medium">Light Mode</span>
          </button>
          
          <button
            onClick={() => handleModeSelection(true)}
            className="p-4 rounded-xl border-2 border-gray-300 hover:border-red-600 transition-all duration-300 focus:outline-none focus:ring-2 focus:ring-red-600 focus:ring-offset-2"
            aria-label="Select dark mode"
          >
            <Moon className="w-8 h-8 mx-auto mb-2 text-blue-400" />
            <span className="text-sm font-medium">Dark Mode</span>
          </button>
        </div>

        <div className="flex items-start space-x-2 text-xs text-gray-500 dark:text-gray-400">
          <Shield className="w-4 h-4 mt-0.5 flex-shrink-0" />
          <p>
            <strong>Transparency Notice:</strong> Ad space owners are responsible for content approval and display. 
            All user data is stored on-chain for complete transparency.
          </p>
        </div>
      </div>
    </div>
  );

  // User Type Selection Component
  const UserTypeSelection = () => {
    const [hoveredType, setHoveredType] = useState('');

    return (
      <div className={`min-h-screen flex items-center justify-center ${bgClass} p-4`}>
        <div className="max-w-4xl w-full">
          <button
            onClick={() => {
              setShowUserTypeSelection(false);
              setShowModeSelection(true);
            }}
            className="mb-8 flex items-center space-x-2 text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-300 transition-colors"
          >
            <ArrowRight className="w-4 h-4 rotate-180" />
            <span>Back to mode selection</span>
          </button>

          <div className="text-center mb-12">
            <div className="mb-6">
              <h1 className="text-5xl font-bold mb-4" style={{fontFamily: 'Noto Sans, sans-serif', color: '#960000'}}>
                Screen Sync
              </h1>
            </div>
            <h1 className="text-4xl font-bold mb-4">Choose Your Path</h1>
            <p className="text-xl text-gray-600 dark:text-gray-400">
              How would you like to use Screen Sync?
            </p>
          </div>

          <div className="grid md:grid-cols-2 gap-8">
            <div
              className={`relative p-8 rounded-2xl border-2 cursor-pointer transition-all duration-300 transform hover:scale-105 ${
                hoveredType === 'creator' 
                  ? 'border-red-600 bg-red-50 dark:bg-red-900/30' 
                  : 'border-gray-300 dark:border-gray-700'
              } ${cardBg}`}
              onMouseEnter={() => setHoveredType('creator')}
              onMouseLeave={() => setHoveredType('')}
              onClick={() => handleUserTypeSelection('creator')}
            >
              <div className="text-center">
                <div className={`w-16 h-16 mx-auto mb-4 rounded-xl flex items-center justify-center ${
                  hoveredType === 'creator' ? 'bg-red-600' : 'bg-gray-100 dark:bg-gray-800'
                }`}>
                  <Megaphone className={`w-8 h-8 ${hoveredType === 'creator' ? 'text-white' : 'text-red-600'}`} />
                </div>
                
                <h3 className="text-2xl font-bold mb-2">
                  <span className={hoveredType === 'creator' ? 'text-gray-900 dark:text-white' : ''}>
                    {hoveredType === 'creator' ? 'View P2P Marketplace' : 'Be seen ANYWHERE'}
                  </span>
                </h3>
                
                <p className={`mb-6 ${hoveredType === 'creator' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-600 dark:text-gray-400'}`}>
                  {hoveredType === 'creator' 
                    ? 'Browse premium ad spaces and launch your campaigns globally'
                    : 'Launch campaigns on premium ad spaces worldwide'
                  }
                </p>
                
                <div className={`space-y-3 text-sm ${hoveredType === 'creator' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-600 dark:text-gray-400'}`}>
                  <div className="flex items-center space-x-2">
                    <Globe className="w-4 h-4 text-red-600" />
                    <span>Global marketplace access</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <BarChart3 className="w-4 h-4 text-red-600" />
                    <span>Real-time analytics</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Shield className="w-4 h-4 text-red-600" />
                    <span>AI content compliance</span>
                  </div>
                </div>
              </div>
              
              <ArrowRight className={`absolute bottom-4 right-4 w-6 h-6 transition-all duration-300 ${
                hoveredType === 'creator' ? 'text-red-600 dark:text-red-500 translate-x-1' : 'text-gray-400'
              }`} />
            </div>

            <div
              className={`relative p-8 rounded-2xl border-2 cursor-pointer transition-all duration-300 transform hover:scale-105 ${
                hoveredType === 'owner' 
                  ? 'border-red-600 bg-red-50 dark:bg-red-900/30' 
                  : 'border-gray-300 dark:border-gray-700'
              } ${cardBg}`}
              onMouseEnter={() => setHoveredType('owner')}
              onMouseLeave={() => setHoveredType('')}
              onClick={() => handleUserTypeSelection('owner')}
            >
              <div className="text-center">
                <div className={`w-16 h-16 mx-auto mb-4 rounded-xl flex items-center justify-center ${
                  hoveredType === 'owner' ? 'bg-red-600' : 'bg-gray-100 dark:bg-gray-800'
                }`}>
                  <Users className={`w-8 h-8 ${hoveredType === 'owner' ? 'text-white' : 'text-red-600'}`} />
                </div>
                
                <h3 className="text-2xl font-bold mb-2">
                  <span className={hoveredType === 'owner' ? 'text-gray-900 dark:text-white' : ''}>
                    {hoveredType === 'owner' ? 'Monetize Your Ad-Space' : 'Join a Global Network'}
                  </span>
                </h3>
                
                <p className={`mb-6 ${hoveredType === 'owner' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-600 dark:text-gray-400'}`}>
                  {hoveredType === 'owner' 
                    ? 'List your ad spaces and earn revenue from global advertisers'
                    : 'Connect your ad spaces to a worldwide marketplace'
                  }
                </p>
                
                <div className={`space-y-3 text-sm ${hoveredType === 'owner' ? 'text-gray-700 dark:text-gray-200' : 'text-gray-600 dark:text-gray-400'}`}>
                  <div className="flex items-center space-x-2">
                    <DollarSign className="w-4 h-4 text-red-600" />
                    <span>Direct P2P revenue</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Globe className="w-4 h-4 text-red-600" />
                    <span>Global advertiser network</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Shield className="w-4 h-4 text-red-600" />
                    <span>Content control</span>
                  </div>
                </div>
              </div>
              
              <ArrowRight className={`absolute bottom-4 right-4 w-6 h-6 transition-all duration-300 ${
                hoveredType === 'owner' ? 'text-red-600 dark:text-red-500 translate-x-1' : 'text-gray-400'
              }`} />
            </div>
          </div>
        </div>
      </div>
    );
  };

  // Onboarding Component
  const Onboarding = () => {
    const [formData, setFormData] = useState({
      wallet: '',
      type: userType,
      location: ''
    });
    const [isConnecting, setIsConnecting] = useState(false);
    const [walletConnected, setWalletConnected] = useState(false);
    const [walletError, setWalletError] = useState(null);

    const connectWallet = async () => {
      setIsConnecting(true);
      setWalletError(null);
      
      try {
        // Check if Phantom wallet is available
        const { solana } = window;
        
        if (!solana) {
          setWalletError('Please install Phantom Wallet to continue');
          setIsConnecting(false);
          return;
        }
        
        if (!solana.isPhantom) {
          setWalletError('Please install Phantom Wallet to continue');
          setIsConnecting(false);
          return;
        }

        // Connect to Phantom
        const response = await solana.connect();
        const walletAddress = response.publicKey.toString();
        
        setFormData({...formData, wallet: walletAddress});
        setWalletConnected(true);
        
        // TODO: Integrate with actual smart contract
        console.log('Wallet connected:', walletAddress);
        console.log('Ready to integrate with governance contract: governance_4mklqzb7u');
        
      } catch (error) {
        console.error('Wallet connection failed:', error);
        if (error.code === 4001) {
          setWalletError('Connection request was rejected');
        } else {
          setWalletError('Failed to connect wallet. Please try again.');
        }
      } finally {
        setIsConnecting(false);
      }
    };

    const handleSubmit = () => {
      if (!walletConnected) {
        setWalletError('Please connect your wallet first');
        return;
      }
      handleOnboardingComplete(formData);
    };

    return (
      <div className={`min-h-screen flex items-center justify-center ${bgClass} p-4`}>
        <div className={`max-w-md w-full p-8 rounded-2xl border ${cardBg}`}>
          <button
            onClick={() => {
              setShowOnboarding(false);
              setShowUserTypeSelection(true);
            }}
            className="mb-6 flex items-center space-x-2 text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-300 transition-colors"
          >
            <ArrowRight className="w-4 h-4 rotate-180" />
            <span>Back to user type</span>
          </button>

          <div className="text-center mb-8">
            <div className="mb-6">
              <h1 className="text-3xl font-bold mb-4" style={{fontFamily: 'Noto Sans, sans-serif', color: '#960000'}}>
                Screen Sync
              </h1>
            </div>
            <h2 className="text-2xl font-bold mb-2">Connect Your Wallet</h2>
            <p className="text-gray-600 dark:text-gray-400">
              Join the decentralized advertising revolution
            </p>
          </div>

          <div className="space-y-6">
            {walletError && (
              <ErrorMessage 
                message={walletError} 
                onDismiss={() => setWalletError(null)} 
              />
            )}

            <div>
              <label className="block text-sm font-medium mb-2">Solana Wallet Connection *</label>
              {!walletConnected ? (
                <button
                  onClick={connectWallet}
                  disabled={isConnecting}
                  className="w-full p-4 border-2 border-dashed border-gray-300 dark:border-gray-600 rounded-lg hover:border-red-600 dark:hover:border-red-400 transition-colors flex items-center justify-center space-x-3 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  <Wallet className="w-6 h-6 text-gray-400" />
                  <span className="text-lg">
                    {isConnecting ? 'Connecting...' : 'Connect Wallet'}
                  </span>
                </button>
              ) : (
                <div className="w-full p-4 bg-green-50 dark:bg-green-900/20 border-2 border-green-300 dark:border-green-600 rounded-lg flex items-center justify-between">
                  <div className="flex items-center space-x-3">
                    <div className="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
                    <span className="font-medium">Wallet Connected</span>
                  </div>
                  <span className="text-sm text-gray-600 dark:text-gray-300 font-mono">
                    {formData.wallet.slice(0, 8)}...{formData.wallet.slice(-4)}
                  </span>
                </div>
              )}
            </div>

            <div>
              <label className="block text-sm font-medium mb-2">Location (Optional)</label>
              <div className="relative">
                <input
                  type="text"
                  placeholder="Your location"
                  className="w-full p-3 pl-10 border border-gray-300 dark:border-gray-700 rounded-lg bg-transparent focus:ring-2 focus:ring-red-600 focus:border-transparent"
                  value={formData.location}
                  onChange={(e) => setFormData({...formData, location: e.target.value})}
                />
                <MapPin className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />
              </div>
            </div>

            <button
              onClick={handleSubmit}
              disabled={!walletConnected}
              className={`w-full py-3 rounded-lg font-semibold transition-colors flex items-center justify-center space-x-2 ${
                walletConnected 
                  ? 'bg-red-600 text-white hover:bg-red-700' 
                  : 'bg-gray-300 text-gray-500 cursor-not-allowed'
              }`}
            >
              <span>Enter Screen Sync</span>
              <ArrowRight className="w-4 h-4" />
            </button>
          </div>

          <p className="text-xs text-gray-500 dark:text-gray-400 mt-4 text-center">
            Data stored on-chain for transparency. No personal information is collected.
          </p>
        </div>
      </div>
    );
  };

  // Ad Space Owner Dashboard
  const AdSpaceOwnerDashboard = () => {
    const [formData, setFormData] = useState({
      spaceType: '',
      displaySize: '',
      location: '',
      price: '',
      impressions: '',
      restrictions: ''
    });
    const [errors, setErrors] = useState({});
    const [isSubmitting, setIsSubmitting] = useState(false);

    const validateForm = () => {
      const newErrors = {};
      
      if (!formData.spaceType) {
        newErrors.spaceType = 'Please select a space type';
      }
      
      if (!formData.displaySize || !/^\d+x\d+$/.test(formData.displaySize)) {
        newErrors.displaySize = 'Format must be: 1920x1080';
      }
      
      if (!formData.location) {
        newErrors.location = 'Location is required';
      }
      
      if (!formData.price || parseFloat(formData.price) <= 0) {
        newErrors.price = 'Price must be greater than 0';
      }
      
      if (!formData.impressions || parseInt(formData.impressions) <= 0) {
        newErrors.impressions = 'Impressions must be greater than 0';
      }
      
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };

    const handleSubmit = async () => {
      if (!validateForm()) return;
      
      setIsSubmitting(true);
      // TODO: Submit to smart contract
      console.log('Submitting ad space listing:', formData);
      
      // Simulate submission
      setTimeout(() => {
        setIsSubmitting(false);
        alert('Ad space listing created successfully!');
      }, 2000);
    };

    return (
      <div className={`min-h-screen ${bgClass}`}>
        {/* Header */}
        <header className={`border-b ${darkMode ? 'border-gray-900' : 'border-gray-200'}`}>
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center space-x-4">
                <h1 className="text-xl font-bold" style={{fontFamily: 'Noto Sans, sans-serif', color: '#960000'}}>
                  Screen Sync
                </h1>
                <span className="text-sm text-gray-500">Ad Space Owner Portal</span>
              </div>
              
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    setShowDashboard(false);
                    setShowUserTypeSelection(true);
                  }}
                  className="text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-300 transition-colors"
                >
                  ← Switch User Type
                </button>
                
                <button
                  onClick={() => setDarkMode(!darkMode)}
                  className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                >
                  {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
                </button>
                
                <div className="flex items-center space-x-2 bg-gray-100 dark:bg-gray-800 px-3 py-2 rounded-lg">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-sm font-medium">
                    {userData.wallet ? `${userData.wallet.slice(0, 4)}...${userData.wallet.slice(-4)}` : 'Connected'}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Hero Section */}
          <div className="text-center mb-12">
            <h1 className="text-4xl font-bold mb-4">Monetize Your Ad Space</h1>
            <p className="text-xl text-gray-600 dark:text-gray-400 max-w-3xl mx-auto">
              Connect your screens, websites, and digital properties to our global advertising network.
              Earn revenue from premium advertisers worldwide.
            </p>
          </div>

          {/* Benefits Grid */}
          <div className="grid md:grid-cols-3 gap-8 mb-12">
            <div className={`p-6 rounded-xl ${cardBg} border text-center`}>
              <div className="w-16 h-16 mx-auto mb-4 bg-green-100 dark:bg-green-900/20 rounded-xl flex items-center justify-center">
                <DollarSign className="w-8 h-8 text-green-600" />
              </div>
              <h3 className="text-xl font-bold mb-2">Direct Revenue</h3>
              <p className="text-gray-600 dark:text-gray-400">
                Keep 97.5% of earnings. No middlemen, no hidden fees. Get paid directly in SOL or $SSC tokens.
              </p>
            </div>

            <div className={`p-6 rounded-xl ${cardBg} border text-center`}>
              <div className="w-16 h-16 mx-auto mb-4 bg-blue-100 dark:bg-blue-900/20 rounded-xl flex items-center justify-center">
                <Globe className="w-8 h-8 text-blue-600" />
              </div>
              <h3 className="text-xl font-bold mb-2">Global Reach</h3>
              <p className="text-gray-600 dark:text-gray-400">
                Access advertisers from around the world. Our AI matches your space with the highest-paying campaigns.
              </p>
            </div>

            <div className={`p-6 rounded-xl ${cardBg} border text-center`}>
              <div className="w-16 h-16 mx-auto mb-4 bg-purple-100 dark:bg-purple-900/20 rounded-xl flex items-center justify-center">
                <Shield className="w-8 h-8 text-purple-600" />
              </div>
              <h3 className="text-xl font-bold mb-2">Full Control</h3>
              <p className="text-gray-600 dark:text-gray-400">
                You decide what content appears on your space. AI pre-screens for compliance, you make the final call.
              </p>
            </div>
          </div>

          {/* Configuration Section */}
          <div className={`p-8 rounded-xl ${cardBg} border`}>
            <h2 className="text-2xl font-bold mb-6">Configure Your Ad Space</h2>
            
            <div className="grid md:grid-cols-2 gap-8">
              <div>
                <h3 className="text-lg font-semibold mb-4">Space Details</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Space Type *</label>
                    <select 
                      className={`w-full p-3 border rounded-lg bg-transparent ${
                        errors.spaceType ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'
                      }`}
                      value={formData.spaceType}
                      onChange={(e) => setFormData({...formData, spaceType: e.target.value})}
                    >
                      <option value="">Select a type</option>
                      <option value="billboard">Digital Billboard</option>
                      <option value="website">Website Banner</option>
                      <option value="mobile">Mobile App Space</option>
                      <option value="social">Social Media</option>
                      <option value="physical">Physical Screen</option>
                    </select>
                    {errors.spaceType && (
                      <p className="text-red-500 text-sm mt-1">{errors.spaceType}</p>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">Display Size *</label>
                    <input 
                      type="text" 
                      placeholder="1920x1080" 
                      className={`w-full p-3 border rounded-lg bg-transparent ${
                        errors.displaySize ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'
                      }`}
                      value={formData.displaySize}
                      onChange={(e) => setFormData({...formData, displaySize: e.target.value})}
                    />
                    {errors.displaySize && (
                      <p className="text-red-500 text-sm mt-1">{errors.displaySize}</p>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">Location *</label>
                    <input 
                      type="text" 
                      placeholder="New York, Times Square" 
                      className={`w-full p-3 border rounded-lg bg-transparent ${
                        errors.location ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'
                      }`}
                      value={formData.location}
                      onChange={(e) => setFormData({...formData, location: e.target.value})}
                    />
                    {errors.location && (
                      <p className="text-red-500 text-sm mt-1">{errors.location}</p>
                    )}
                  </div>
                </div>
              </div>

              <div>
                <h3 className="text-lg font-semibold mb-4">Pricing & Availability</h3>
                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium mb-2">Base Price (SOL/week) *</label>
                    <input 
                      type="number" 
                      step="0.1"
                      placeholder="2.5" 
                      className={`w-full p-3 border rounded-lg bg-transparent ${
                        errors.price ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'
                      }`}
                      value={formData.price}
                      onChange={(e) => setFormData({...formData, price: e.target.value})}
                    />
                    {errors.price && (
                      <p className="text-red-500 text-sm mt-1">{errors.price}</p>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">Monthly Impressions *</label>
                    <input 
                      type="number" 
                      placeholder="1000000" 
                      className={`w-full p-3 border rounded-lg bg-transparent ${
                        errors.impressions ? 'border-red-500' : 'border-gray-300 dark:border-gray-700'
                      }`}
                      value={formData.impressions}
                      onChange={(e) => setFormData({...formData, impressions: e.target.value})}
                    />
                    {errors.impressions && (
                      <p className="text-red-500 text-sm mt-1">{errors.impressions}</p>
                    )}
                  </div>
                  
                  <div>
                    <label className="block text-sm font-medium mb-2">Content Restrictions</label>
                    <textarea 
                      placeholder="No adult content, gambling, or political ads"
                      className="w-full p-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-transparent h-20 resize-none"
                      value={formData.restrictions}
                      onChange={(e) => setFormData({...formData, restrictions: e.target.value})}
                    />
                  </div>
                </div>
              </div>
            </div>

            <div className="mt-8 flex justify-center">
              <button 
                onClick={handleSubmit}
                disabled={isSubmitting}
                className="bg-red-600 text-white px-8 py-3 rounded-lg hover:bg-red-700 transition-colors font-semibold disabled:opacity-50 disabled:cursor-not-allowed flex items-center space-x-2"
              >
                {isSubmitting ? (
                  <>
                    <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                    <span>Creating Listing...</span>
                  </>
                ) : (
                  <span>List Ad Space on Network</span>
                )}
              </button>
            </div>
          </div>
        </main>
      </div>
    );
  };

  // P2P Marketplace Dashboard
  const MarketplaceDashboard = () => {
    // Filter listings based on search term
    const filteredListings = useMemo(() => {
      if (!searchTerm.trim()) return mockListings;
      
      const lowercaseSearch = searchTerm.toLowerCase();
      return mockListings.filter(listing => 
        listing.title.toLowerCase().includes(lowercaseSearch) ||
        listing.location.toLowerCase().includes(lowercaseSearch)
      );
    }, [searchTerm]);

    const AdSpaceCard = ({ listing }) => (
      <div className={`rounded-xl border overflow-hidden hover:shadow-xl transition-all duration-300 ${cardBg}`}>
        <div className="relative">
          <img 
            src={listing.image} 
            alt={listing.title}
            className="w-full h-48 object-cover"
            loading="lazy"
          />
          <div className="absolute top-3 right-3">
            <span className={`px-2 py-1 rounded-full text-xs font-semibold ${
              listing.available 
                ? 'bg-green-100 text-green-800 dark:bg-green-900/50 dark:text-green-200' 
                : 'bg-red-100 text-red-800 dark:bg-red-900/50 dark:text-red-200'
            }`}>
              {listing.available ? 'Available' : 'Booked'}
            </span>
          </div>
          {!isVisionMode && (
            <div className="absolute top-3 left-3">
              <span className="bg-blue-100 text-blue-800 dark:bg-blue-900/50 dark:text-blue-200 px-2 py-1 rounded-full text-xs font-semibold">
                Vision Preview
              </span>
            </div>
          )}
        </div>
        
        <div className="p-6">
          <h3 className="text-lg font-bold mb-2">{listing.title}</h3>
          
          <div className="space-y-2 mb-4 text-sm text-gray-600 dark:text-gray-400">
            <div className="flex items-center">
              <MapPin className="w-4 h-4 mr-2 text-red-600 flex-shrink-0" />
              {listing.location}
            </div>
            <div className="flex items-center">
              <Eye className="w-4 h-4 mr-2 text-red-600 flex-shrink-0" />
              {listing.views.toLocaleString()} views/month
            </div>
            <div className="flex items-center">
              <Clock className="w-4 h-4 mr-2 text-red-600 flex-shrink-0" />
              {listing.duration} days minimum
            </div>
          </div>
          
          <div className="flex items-center justify-between">
            <div>
              <span className="text-xl font-bold">{listing.price} SOL</span>
              <span className="text-gray-600 dark:text-gray-400 text-sm">/week</span>
            </div>
            <button 
              className={`px-4 py-2 rounded-lg font-semibold transition-colors ${
                listing.available && isVisionMode
                  ? 'bg-red-600 text-white hover:bg-red-700'
                  : 'bg-gray-300 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'
              }`}
              disabled={!listing.available || !isVisionMode}
              onClick={() => {
                if (listing.available && isVisionMode) {
                  console.log('Booking space:', listing.id);
                  // TODO: Implement booking logic
                }
              }}
            >
              {!isVisionMode ? 'Coming Soon' : listing.available ? 'Book Now' : 'Unavailable'}
            </button>
          </div>
        </div>
      </div>
    );

    const EmptyState = () => (
      <div className="text-center py-16">
        <div className="w-24 h-24 mx-auto mb-6 bg-gray-100 dark:bg-gray-800 rounded-full flex items-center justify-center">
          <Plus className="w-12 h-12 text-gray-400" />
        </div>
        <h3 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
          {searchTerm ? 'No Results Found' : 'No Live Ad Spaces Yet'}
        </h3>
        <p className="text-gray-600 dark:text-gray-400 mb-6 max-w-md mx-auto">
          {searchTerm 
            ? `No ad spaces match "${searchTerm}". Try a different search.`
            : 'Be the first to list your ad space on our network! Switch to Vision Mode to see what\'s coming.'
          }
        </p>
        {!searchTerm && (
          <button 
            onClick={() => setIsVisionMode(true)}
            className="bg-red-600 text-white px-6 py-3 rounded-lg hover:bg-red-700 transition-colors"
          >
            View Our Vision
          </button>
        )}
      </div>
    );

    return (
      <div className={`min-h-screen ${bgClass}`}>
        {/* Header */}
        <header className={`border-b ${darkMode ? 'border-gray-900' : 'border-gray-200'}`}>
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="flex items-center justify-between h-16">
              <div className="flex items-center space-x-4">
                <h1 className="text-xl font-bold" style={{fontFamily: 'Noto Sans, sans-serif', color: '#960000'}}>
                  Screen Sync
                </h1>
                <span className="text-sm text-gray-500">P2P Marketplace</span>
              </div>
              
              <div className="flex items-center space-x-4">
                <button
                  onClick={() => {
                    setShowDashboard(false);
                    setShowUserTypeSelection(true);
                  }}
                  className="text-gray-600 dark:text-gray-400 hover:text-red-600 dark:hover:text-red-300 transition-colors"
                >
                  ← Switch User Type
                </button>

                {/* Vision/Reality Toggle */}
                <div className="flex items-center space-x-3">
                  <span className={`text-sm ${!isVisionMode ? 'text-gray-900 dark:text-white font-semibold' : 'text-gray-500'}`}>
                    Live
                  </span>
                  <button
                    onClick={() => setIsVisionMode(!isVisionMode)}
                    className={`relative w-12 h-6 rounded-full transition-colors ${
                      isVisionMode ? 'bg-red-600' : 'bg-gray-300 dark:bg-gray-700'
                    }`}
                  >
                    <div className={`absolute w-5 h-5 bg-white rounded-full shadow transform transition-transform ${
                      isVisionMode ? 'translate-x-6' : 'translate-x-0.5'
                    } top-0.5`} />
                  </button>
                  <span className={`text-sm ${isVisionMode ? 'text-gray-900 dark:text-white font-semibold' : 'text-gray-500'}`}>
                    Vision
                  </span>
                </div>
                
                <button
                  onClick={() => setDarkMode(!darkMode)}
                  className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors"
                >
                  {darkMode ? <Sun className="w-5 h-5" /> : <Moon className="w-5 h-5" />}
                </button>
                
                <div className="flex items-center space-x-2 bg-gray-100 dark:bg-gray-800 px-3 py-2 rounded-lg">
                  <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                  <span className="text-sm font-medium">
                    {userData.wallet ? `${userData.wallet.slice(0, 4)}...${userData.wallet.slice(-4)}` : 'Connected'}
                  </span>
                </div>
              </div>
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          {/* Vision/Reality Header */}
          {isVisionMode ? (
            <div className="text-center mb-8 p-6 bg-gradient-to-r from-red-50 to-red-100 dark:from-red-900/20 dark:to-red-800/20 rounded-xl">
              <h2 className="text-2xl font-bold text-red-800 dark:text-red-200 mb-2">🚀 Vision Mode: Our Future</h2>
              <p className="text-red-700 dark:text-red-300">
                Explore what Screen Sync will become - a global network of premium ad spaces
              </p>
            </div>
          ) : (
            <div className="text-center mb-8 p-6 bg-gradient-to-r from-blue-50 to-blue-100 dark:from-blue-900/20 dark:to-blue-800/20 rounded-xl">
              <h2 className="text-2xl font-bold text-blue-800 dark:text-blue-200 mb-2">📡 Live Network</h2>
              <p className="text-blue-700 dark:text-blue-300">
                Currently active ad spaces on the Screen Sync network
              </p>
            </div>
          )}

          {/* Search */}
          {isVisionMode && (
            <div className="mb-8">
              <div className="relative max-w-2xl">
                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  type="text"
                  placeholder="Search ad spaces..."
                  className="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-700 rounded-xl focus:ring-2 focus:ring-red-600 focus:border-transparent bg-transparent"
                  value={searchTerm}
                  onChange={(e) => setSearchTerm(e.target.value)}
                />
              </div>
            </div>
          )}

          {/* Stats */}
          {isVisionMode && (
            <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
              <div className={`p-6 rounded-xl ${cardBg} border`}>
                <div className="text-2xl font-bold text-red-600 mb-2">{filteredListings.length}</div>
                <div className="text-gray-600 dark:text-gray-400">Available Spaces</div>
              </div>
              <div className={`p-6 rounded-xl ${cardBg} border`}>
                <div className="text-2xl font-bold text-red-600 mb-2">25+</div>
                <div className="text-gray-600 dark:text-gray-400">Countries</div>
              </div>
              <div className={`p-6 rounded-xl ${cardBg} border`}>
                <div className="text-2xl font-bold text-red-600 mb-2">500M+</div>
                <div className="text-gray-600 dark:text-gray-400">Monthly Views</div>
              </div>
              <div className={`p-6 rounded-xl ${cardBg} border`}>
                <div className="text-2xl font-bold text-red-600 mb-2">4.8★</div>
                <div className="text-gray-600 dark:text-gray-400">Avg Rating</div>
              </div>
            </div>
          )}

          {/* Content */}
          {isVisionMode ? (
            filteredListings.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {filteredListings.map(listing => (
                  <AdSpaceCard key={listing.id} listing={listing} />
                ))}
              </div>
            ) : (
              <EmptyState />
            )
          ) : (
            <EmptyState />
          )}
        </main>
      </div>
    );
  };

  // Main Dashboard Component
  const Dashboard = () => {
    // Different content based on user type
    if (userType === 'owner') {
      return <AdSpaceOwnerDashboard />;
    } else {
      return <MarketplaceDashboard />;
    }
  };

  return (
    <div className={`${darkMode ? 'dark' : ''} transition-all duration-300`} style={{fontFamily: 'Noto Sans, sans-serif'}}>
      {showModeSelection && <ModeSelection />}
      {showUserTypeSelection && <UserTypeSelection />}
      {showOnboarding && <Onboarding />}
      {showDashboard && <Dashboard />}
    </div>
  );
};

export default ScreenSyncDApp;
